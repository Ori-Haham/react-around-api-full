{"ast":null,"code":"class Auth {\n  constructor(_ref) {\n    let {\n      baseUrl\n    } = _ref;\n\n    this.register = (email, password) => {\n      return this._postMethod('signup', email, password);\n    };\n\n    this.authorize = (email, password) => {\n      return fetch(`${this._baseUrl}/signin`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      }).then(response => response.json()).then(data => {\n        if (data.token) {\n          localStorage.removeItem('jwt');\n          localStorage.setItem('jwt', data.token);\n          console.log('ori:', data);\n          return data;\n        }\n      });\n    };\n\n    this.getAuthorizaedContent = token => {\n      return fetch(`${this._baseUrl}/users/me`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        }\n      }).then(response => {\n        return response.json();\n      }).catch(err => console.log(err));\n    };\n\n    this._baseUrl = baseUrl;\n  }\n\n  _postMethod(path, email, password) {\n    return fetch(`${this._baseUrl}/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => {\n      return res.json();\n    });\n  }\n\n}\n\nconst auth = new Auth({\n  baseUrl: 'https://register.nomoreparties.co'\n}); // const BASE_URL = 'https://register.nomoreparties.co';\n// export const register = (email, password) => {\n//   return fetch(`${BASE_URL}/signup`, {\n//     method: 'POST',\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//     body: JSON.stringify({ email, password }),\n//   }).then((res) => {\n//     return res.json();\n//   });\n// };\n// export const authorize = (email, password) => {\n//   return fetch(`${BASE_URL}/signin`, {\n//     method: 'POST',\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//     body: JSON.stringify({ email, password }),\n//   })\n//     .then((response) => response.json())\n//     .then((data) => {\n//       if (data.token) {\n//         localStorage.removeItem('jwt');\n//         localStorage.setItem('jwt', data.token);\n//         console.log('ori:', data);\n//         return data;\n//       }\n//     });\n// };\n// export const getAuthorizaedContent = (token) => {\n//   return fetch(`${BASE_URL}/users/me`, {\n//     method: 'GET',\n//     headers: {\n//       'Content-Type': 'application/json',\n//       Authorization: `Bearer ${token}`,\n//     },\n//   })\n//     .then((response) => {\n//       return response.json();\n//     })\n//     .catch((err) => console.log(err));\n// };","map":{"version":3,"names":["Auth","constructor","baseUrl","register","email","password","_postMethod","authorize","fetch","_baseUrl","method","headers","body","JSON","stringify","then","response","json","data","token","localStorage","removeItem","setItem","console","log","getAuthorizaedContent","Authorization","catch","err","path","res","auth"],"sources":["C:/dev/around-react-auth/react-around-auth/src/utils.js/auth.js"],"sourcesContent":["class Auth {\r\n  constructor({ baseUrl }) {\r\n    this._baseUrl = baseUrl;\r\n  }\r\n\r\n  _postMethod(path, email, password) {\r\n    return fetch(`${this._baseUrl}/`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    }).then((res) => {\r\n      return res.json();\r\n    });\r\n  }\r\n\r\n  register = (email, password) => {\r\n    return this._postMethod('signup', email, password);\r\n  };\r\n\r\n  authorize = (email, password) => {\r\n    return fetch(`${this._baseUrl}/signin`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.token) {\r\n          localStorage.removeItem('jwt');\r\n          localStorage.setItem('jwt', data.token);\r\n          console.log('ori:', data);\r\n          return data;\r\n        }\r\n      });\r\n  };\r\n\r\n  getAuthorizaedContent = (token) => {\r\n    return fetch(`${this._baseUrl}/users/me`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n}\r\n\r\nconst auth = new Auth({ baseUrl: 'https://register.nomoreparties.co' });\r\n\r\n// const BASE_URL = 'https://register.nomoreparties.co';\r\n\r\n// export const register = (email, password) => {\r\n//   return fetch(`${BASE_URL}/signup`, {\r\n//     method: 'POST',\r\n//     headers: {\r\n//       'Content-Type': 'application/json',\r\n//     },\r\n//     body: JSON.stringify({ email, password }),\r\n//   }).then((res) => {\r\n//     return res.json();\r\n//   });\r\n// };\r\n\r\n// export const authorize = (email, password) => {\r\n//   return fetch(`${BASE_URL}/signin`, {\r\n//     method: 'POST',\r\n//     headers: {\r\n//       'Content-Type': 'application/json',\r\n//     },\r\n//     body: JSON.stringify({ email, password }),\r\n//   })\r\n//     .then((response) => response.json())\r\n//     .then((data) => {\r\n//       if (data.token) {\r\n//         localStorage.removeItem('jwt');\r\n//         localStorage.setItem('jwt', data.token);\r\n//         console.log('ori:', data);\r\n//         return data;\r\n//       }\r\n//     });\r\n// };\r\n\r\n// export const getAuthorizaedContent = (token) => {\r\n//   return fetch(`${BASE_URL}/users/me`, {\r\n//     method: 'GET',\r\n//     headers: {\r\n//       'Content-Type': 'application/json',\r\n//       Authorization: `Bearer ${token}`,\r\n//     },\r\n//   })\r\n//     .then((response) => {\r\n//       return response.json();\r\n//     })\r\n//     .catch((err) => console.log(err));\r\n// };\r\n"],"mappings":"AAAA,MAAMA,IAAN,CAAW;EACTC,WAAW,OAAc;IAAA,IAAb;MAAEC;IAAF,CAAa;;IAAA,KAgBzBC,QAhByB,GAgBd,CAACC,KAAD,EAAQC,QAAR,KAAqB;MAC9B,OAAO,KAAKC,WAAL,CAAiB,QAAjB,EAA2BF,KAA3B,EAAkCC,QAAlC,CAAP;IACD,CAlBwB;;IAAA,KAoBzBE,SApByB,GAoBb,CAACH,KAAD,EAAQC,QAAR,KAAqB;MAC/B,OAAOG,KAAK,CAAE,GAAE,KAAKC,QAAS,SAAlB,EAA4B;QACtCC,MAAM,EAAE,MAD8B;QAEtCC,OAAO,EAAE;UACP,gBAAgB;QADT,CAF6B;QAKtCC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;UAAEV,KAAF;UAASC;QAAT,CAAf;MALgC,CAA5B,CAAL,CAOJU,IAPI,CAOEC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAPf,EAQJF,IARI,CAQEG,IAAD,IAAU;QACd,IAAIA,IAAI,CAACC,KAAT,EAAgB;UACdC,YAAY,CAACC,UAAb,CAAwB,KAAxB;UACAD,YAAY,CAACE,OAAb,CAAqB,KAArB,EAA4BJ,IAAI,CAACC,KAAjC;UACAI,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBN,IAApB;UACA,OAAOA,IAAP;QACD;MACF,CAfI,CAAP;IAgBD,CArCwB;;IAAA,KAuCzBO,qBAvCyB,GAuCAN,KAAD,IAAW;MACjC,OAAOX,KAAK,CAAE,GAAE,KAAKC,QAAS,WAAlB,EAA8B;QACxCC,MAAM,EAAE,KADgC;QAExCC,OAAO,EAAE;UACP,gBAAgB,kBADT;UAEPe,aAAa,EAAG,UAASP,KAAM;QAFxB;MAF+B,CAA9B,CAAL,CAOJJ,IAPI,CAOEC,QAAD,IAAc;QAClB,OAAOA,QAAQ,CAACC,IAAT,EAAP;MACD,CATI,EAUJU,KAVI,CAUGC,GAAD,IAASL,OAAO,CAACC,GAAR,CAAYI,GAAZ,CAVX,CAAP;IAWD,CAnDwB;;IACvB,KAAKnB,QAAL,GAAgBP,OAAhB;EACD;;EAEDI,WAAW,CAACuB,IAAD,EAAOzB,KAAP,EAAcC,QAAd,EAAwB;IACjC,OAAOG,KAAK,CAAE,GAAE,KAAKC,QAAS,GAAlB,EAAsB;MAChCC,MAAM,EAAE,MADwB;MAEhCC,OAAO,EAAE;QACP,gBAAgB;MADT,CAFuB;MAKhCC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QAAEV,KAAF;QAASC;MAAT,CAAf;IAL0B,CAAtB,CAAL,CAMJU,IANI,CAMEe,GAAD,IAAS;MACf,OAAOA,GAAG,CAACb,IAAJ,EAAP;IACD,CARM,CAAP;EASD;;AAfQ;;AAuDX,MAAMc,IAAI,GAAG,IAAI/B,IAAJ,CAAS;EAAEE,OAAO,EAAE;AAAX,CAAT,CAAb,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}
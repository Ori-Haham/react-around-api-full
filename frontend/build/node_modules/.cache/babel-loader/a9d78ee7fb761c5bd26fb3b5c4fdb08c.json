{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      authorizationCode\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._authorization = authorizationCode;\n  }\n\n  _checkResponse(res) {\n    if (!res.ok) {\n      return Promise.reject(res.status);\n    }\n\n    return res.json();\n  }\n\n  getUserInfoApi(path) {\n    return fetch(`${this._baseUrl}${path}`, {\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._checkResponse);\n  }\n\n  updateUserData(path, name, about) {\n    return fetch(`${this._baseUrl}${path}`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._authorization,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(this._checkResponse);\n  }\n\n  getInitialCard(path) {\n    return fetch(`${this._baseUrl}${path}`, {\n      headers: {\n        Authorization: this._authorization\n      }\n    }).then(this._checkResponse);\n  }\n\n  postCard(path, name, link) {\n    return fetch(`${this._baseUrl}${path}`, {\n      method: 'POST',\n      headers: {\n        authorization: this._authorization,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(this._checkResponse);\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._baseUrl}${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._authorization\n      }\n    });\n  }\n\n  addLike(path) {\n    return fetch(`${this._baseUrl}${path}`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._checkResponse);\n  }\n\n  removeLike(path) {\n    return fetch(`${this._baseUrl}${path}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._checkResponse);\n  }\n\n  editProfileImage(path, avatar) {\n    return fetch(`${this._baseUrl}${path}`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._authorization,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    }).then(this._checkResponse);\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: 'http://api.aroundori.students.nomoredomainssbs.ru',\n  authorizationCode: `Beaarer ${localStorage.getItem('jwt')}`\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","baseUrl","authorizationCode","_baseUrl","_authorization","_checkResponse","res","ok","Promise","reject","status","json","getUserInfoApi","path","fetch","headers","authorization","then","updateUserData","name","about","method","body","JSON","stringify","getInitialCard","Authorization","postCard","link","deleteCard","cardId","addLike","removeLike","editProfileImage","avatar","api","localStorage","getItem"],"sources":["C:/dev/frontend-around/frontend/src/utils.js/api.js"],"sourcesContent":["class Api {\r\n  constructor({ baseUrl, authorizationCode }) {\r\n    this._baseUrl = baseUrl;\r\n    this._authorization = authorizationCode;\r\n  }\r\n\r\n  _checkResponse(res) {\r\n    if (!res.ok) {\r\n      return Promise.reject(res.status);\r\n    }\r\n    return res.json();\r\n  }\r\n\r\n  getUserInfoApi(path) {\r\n    return fetch(`${this._baseUrl}${path}`, {\r\n      headers: { authorization: this._authorization },\r\n    }).then(this._checkResponse);\r\n  }\r\n\r\n  updateUserData(path, name, about) {\r\n    return fetch(`${this._baseUrl}${path}`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        authorization: this._authorization,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        name: name,\r\n        about: about,\r\n      }),\r\n    }).then(this._checkResponse);\r\n  }\r\n\r\n  getInitialCard(path) {\r\n    return fetch(`${this._baseUrl}${path}`, {\r\n      headers: { Authorization: this._authorization },\r\n    }).then(this._checkResponse);\r\n  }\r\n\r\n  postCard(path, name, link) {\r\n    return fetch(`${this._baseUrl}${path}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        authorization: this._authorization,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        name: name,\r\n        link: link,\r\n      }),\r\n    }).then(this._checkResponse);\r\n  }\r\n\r\n  deleteCard(cardId) {\r\n    return fetch(`${this._baseUrl}${cardId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        authorization: this._authorization,\r\n      },\r\n    });\r\n  }\r\n\r\n  addLike(path) {\r\n    return fetch(`${this._baseUrl}${path}`, {\r\n      method: 'PUT',\r\n      headers: { authorization: this._authorization },\r\n    }).then(this._checkResponse);\r\n  }\r\n  removeLike(path) {\r\n    return fetch(`${this._baseUrl}${path}`, {\r\n      method: 'DELETE',\r\n      headers: { authorization: this._authorization },\r\n    }).then(this._checkResponse);\r\n  }\r\n\r\n  editProfileImage(path, avatar) {\r\n    return fetch(`${this._baseUrl}${path}`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        authorization: this._authorization,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        avatar: avatar,\r\n      }),\r\n    }).then(this._checkResponse);\r\n  }\r\n}\r\n\r\nconst api = new Api({\r\n  baseUrl: 'http://api.aroundori.students.nomoredomainssbs.ru',\r\n  authorizationCode: `Beaarer ${localStorage.getItem('jwt')}`,\r\n});\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,MAAMA,GAAN,CAAU;EACRC,WAAW,OAAiC;IAAA,IAAhC;MAAEC,OAAF;MAAWC;IAAX,CAAgC;IAC1C,KAAKC,QAAL,GAAgBF,OAAhB;IACA,KAAKG,cAAL,GAAsBF,iBAAtB;EACD;;EAEDG,cAAc,CAACC,GAAD,EAAM;IAClB,IAAI,CAACA,GAAG,CAACC,EAAT,EAAa;MACX,OAAOC,OAAO,CAACC,MAAR,CAAeH,GAAG,CAACI,MAAnB,CAAP;IACD;;IACD,OAAOJ,GAAG,CAACK,IAAJ,EAAP;EACD;;EAEDC,cAAc,CAACC,IAAD,EAAO;IACnB,OAAOC,KAAK,CAAE,GAAE,KAAKX,QAAS,GAAEU,IAAK,EAAzB,EAA4B;MACtCE,OAAO,EAAE;QAAEC,aAAa,EAAE,KAAKZ;MAAtB;IAD6B,CAA5B,CAAL,CAEJa,IAFI,CAEC,KAAKZ,cAFN,CAAP;EAGD;;EAEDa,cAAc,CAACL,IAAD,EAAOM,IAAP,EAAaC,KAAb,EAAoB;IAChC,OAAON,KAAK,CAAE,GAAE,KAAKX,QAAS,GAAEU,IAAK,EAAzB,EAA4B;MACtCQ,MAAM,EAAE,OAD8B;MAEtCN,OAAO,EAAE;QACPC,aAAa,EAAE,KAAKZ,cADb;QAEP,gBAAgB;MAFT,CAF6B;MAMtCkB,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACnBL,IAAI,EAAEA,IADa;QAEnBC,KAAK,EAAEA;MAFY,CAAf;IANgC,CAA5B,CAAL,CAUJH,IAVI,CAUC,KAAKZ,cAVN,CAAP;EAWD;;EAEDoB,cAAc,CAACZ,IAAD,EAAO;IACnB,OAAOC,KAAK,CAAE,GAAE,KAAKX,QAAS,GAAEU,IAAK,EAAzB,EAA4B;MACtCE,OAAO,EAAE;QAAEW,aAAa,EAAE,KAAKtB;MAAtB;IAD6B,CAA5B,CAAL,CAEJa,IAFI,CAEC,KAAKZ,cAFN,CAAP;EAGD;;EAEDsB,QAAQ,CAACd,IAAD,EAAOM,IAAP,EAAaS,IAAb,EAAmB;IACzB,OAAOd,KAAK,CAAE,GAAE,KAAKX,QAAS,GAAEU,IAAK,EAAzB,EAA4B;MACtCQ,MAAM,EAAE,MAD8B;MAEtCN,OAAO,EAAE;QACPC,aAAa,EAAE,KAAKZ,cADb;QAEP,gBAAgB;MAFT,CAF6B;MAMtCkB,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACnBL,IAAI,EAAEA,IADa;QAEnBS,IAAI,EAAEA;MAFa,CAAf;IANgC,CAA5B,CAAL,CAUJX,IAVI,CAUC,KAAKZ,cAVN,CAAP;EAWD;;EAEDwB,UAAU,CAACC,MAAD,EAAS;IACjB,OAAOhB,KAAK,CAAE,GAAE,KAAKX,QAAS,GAAE2B,MAAO,EAA3B,EAA8B;MACxCT,MAAM,EAAE,QADgC;MAExCN,OAAO,EAAE;QACPC,aAAa,EAAE,KAAKZ;MADb;IAF+B,CAA9B,CAAZ;EAMD;;EAED2B,OAAO,CAAClB,IAAD,EAAO;IACZ,OAAOC,KAAK,CAAE,GAAE,KAAKX,QAAS,GAAEU,IAAK,EAAzB,EAA4B;MACtCQ,MAAM,EAAE,KAD8B;MAEtCN,OAAO,EAAE;QAAEC,aAAa,EAAE,KAAKZ;MAAtB;IAF6B,CAA5B,CAAL,CAGJa,IAHI,CAGC,KAAKZ,cAHN,CAAP;EAID;;EACD2B,UAAU,CAACnB,IAAD,EAAO;IACf,OAAOC,KAAK,CAAE,GAAE,KAAKX,QAAS,GAAEU,IAAK,EAAzB,EAA4B;MACtCQ,MAAM,EAAE,QAD8B;MAEtCN,OAAO,EAAE;QAAEC,aAAa,EAAE,KAAKZ;MAAtB;IAF6B,CAA5B,CAAL,CAGJa,IAHI,CAGC,KAAKZ,cAHN,CAAP;EAID;;EAED4B,gBAAgB,CAACpB,IAAD,EAAOqB,MAAP,EAAe;IAC7B,OAAOpB,KAAK,CAAE,GAAE,KAAKX,QAAS,GAAEU,IAAK,EAAzB,EAA4B;MACtCQ,MAAM,EAAE,OAD8B;MAEtCN,OAAO,EAAE;QACPC,aAAa,EAAE,KAAKZ,cADb;QAEP,gBAAgB;MAFT,CAF6B;MAMtCkB,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACnBU,MAAM,EAAEA;MADW,CAAf;IANgC,CAA5B,CAAL,CASJjB,IATI,CASC,KAAKZ,cATN,CAAP;EAUD;;AAtFO;;AAyFV,MAAM8B,GAAG,GAAG,IAAIpC,GAAJ,CAAQ;EAClBE,OAAO,EAAE,mDADS;EAElBC,iBAAiB,EAAG,WAAUkC,YAAY,CAACC,OAAb,CAAqB,KAArB,CAA4B;AAFxC,CAAR,CAAZ;AAKA,eAAeF,GAAf"},"metadata":{},"sourceType":"module"}